[transforms.tf_fluentbit_winevtlog]
type = "remap"
inputs = ["sc_fluentbit_winevtlog"]
source = '''
if (.Message != null) {
  lines = split!(.Message, r'\r\n')
  .description = lines[0]

  properties = parse_regex_all!(.Message, r'(?m)^(?P<category>[^\r\n]+):\r\n(?P<properties>(?:\t[^\r\n]+\r\n)+)')
  for_each(properties) -> |_index, match| {
    prop_values = parse_regex_all!(match.properties, r'\t(?P<key>[^\t]+):\t+(?P<value>[^\r\n]+)')
    for_each(prop_values) -> |_index, prop| {
      . = set!(., [match.category, prop.key], prop.value)
    }
  }
}
'''

[[tests]]
name = "Testing parsing of Windows Event log via FluentBit"

[[tests.inputs]]
insert_at = "tf_fluentbit_winevtlog"
type = "log"

[tests.inputs.log_fields]
ActivityID = ""
Channel = "Security"
Computer = "kingslanding.sevenkingdoms.local"
EventID = "4634"
EventRecordID = "80455"
Keywords = "0x8020000000000000"
Level = "0"
Message = "An account was logged off.\r\n\r\nSubject:\r\n\tSecurity ID:\t\tS-1-5-21-1267327980-1800640824-2189074639-1001\r\n\tAccount Name:\t\tWINTERFELL$\r\n\tAccount Domain:\t\tNORTH\r\n\tLogon ID:\t\t0x7F7F1C8\r\n\r\n\tLogon Type:\t\t3\r\n\r\nThis event is generated when a logon session is destroyed. It may be positively correlated with a logon event using the Logon ID value. Logon IDs are only unique between reboots on the same computer."
Opcode = "0"
ProcessID = "592"
ProviderGuid = "{54849625-5478-4994-A5BA-3E3B0328C30D}"
ProviderName = "Microsoft-Windows-Security-Auditing"
Qualifiers = ""
RelatedActivityID = ""
StringInserts = "['S-1-5-21-1267327980-1800640824-2189074639-1001', 'WINTERFELL$', 'NORTH', '0x7f7f1c8', 3]"
Task = "12545"
ThreadID = "7044"
TimeCreated = "2025-09-14 18:05:08 -0400"
UserID = ""
Version = "0"
host = "10.3.10.10"
source_type = "fluent"
tag = "winevtlog.0"
timestamp = "2025-09-14T22:05:10.044136700Z"

[[tests.outputs]]
extract_from = "tf_fluentbit_winevtlog"

[[tests.outputs.conditions]]
type = "vrl"
source = '''
assert!(is_string(.description))
assert!(.description == "An account was logged off.", "Description not parsed from Message field content")
assert!(exists(.Subject), "Subject not parsed from Message field content")
assert!(.Subject."Security ID" == "S-1-5-21-1267327980-1800640824-2189074639-1001", "Subject Security ID not parsed from Message field content")
assert!(.Subject."Account Name" == "WINTERFELL$", "Subject Account Name not parsed from Message field content")
assert!(.Subject."Account Domain" == "NORTH", "Subject Acount Domain not parsed from Message field content")
'''


